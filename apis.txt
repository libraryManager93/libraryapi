Public API:

router.route('/getAllBooks')
    .get(booksController.getAllBooks)
router.route('/authenticate')
    .post(userController.authenticateUser);


Private API:

router.route('/book')
    .post(booksController.addBooks)
    .put(booksController.editBooks)
    .delete(booksController.deleteBooks)

router.route('/users')
    .get(userController.getUsers)
    .post(userController.addUser)
    .put(userController.editUser)
    .delete(userController.deleteUser);

router.route('/bookRequests')
    .get(bookRequestController.getBookRequests)
    .post(bookRequestController.addBookRequests)
    .put(bookRequestController.editBookRequests) =====> Approve or Reject or Lend
    .delete(bookRequestController.deleteBookRequests);

router.route('/borrowedBooks')
    .get(borrowedBooksController.getborrowedBooks)
    .post(borrowedBooksController.addborrowedBooks)=====> For direct borrowal
    .put(borrowedBooksController.editborrowedBooks) =====> Returned 
    .delete(borrowedBooksController.deleteborrowedBooks);


Past Due.
Monthly Fee During sign up
subscription expired users
Past Due Fine

TO DO:
Changes in controller module ====> Do business functionality in addBorrowedBooks, addBookRequests, 
all the get methods ==> if it has query param ID it should return one value. Else it should return everything

Add Books API:
https://www.googleapis.com/books/v1/volumes?q=isbn:0735619670
https://openlibrary.org/api/books?bibkeys=ISBN:9788172234980&jscmd=data&format=json

Validations:
1) Book request --> to approve/reject the request req.body.approve is mandatory, book id and req Id
                    while adding, 
                    Requesting the same book twice

                    Test:
                    http://localhost:3000/bookRequests?bookId=OL8736147M&id=TestReq
2) Borrowed Books --> req.query.bookId && req.query.type==="direct" mandatory,req.query.userId

Test
http://localhost:3000/borrowedBooks?userId="836754"&bookId="OL8736147M"&type="indirect"
{
    "userId": ["5a467f451650ac1c454d11e8"],
    "bookId":["5a476391e64a5d01160a88d3"],
    "requestId":"5a9d8e60540cce09b12c5d6c",
    "borrowType":"indirect",
    "returnedFlag":"false",
    "pastDue":"false"
}

3) Max books based validations